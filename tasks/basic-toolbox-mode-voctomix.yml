---
- name: find old units
  become: true
  shell: (grep -l "#MANAGED BY ANSIBLE" -r /etc/systemd/system/; find /etc/systemd/system/ -type f -name 'voctomix-*') | xargs -rl1 basename
  register: old_units

- name: print status of eunning services
  debug:
    msg: "{{ old_units.stdout_lines }}"

# directories & code
- name: create voctomix directories
  become: true
  file:
    dest: "{{ item }}"
    state: directory
    owner: root
    group: root
    recurse: true
  with_items:
      - /opt/voc/scripts/
      - /opt/voc/release/
      - /video/capture/{{ voc_event_acronym }}
      - /video/encoded/{{ voc_event_acronym }}
      - /video/tmp/{{ voc_event_acronym }}
      - /video/intros/{{ voc_event_acronym }}
      - /video/fuse/{{ voc_event_acronym }}

# decklink sources
- name: deploy decklink-format-detection-script
  become: true
  template:
    src: "voctomix-scripts/ffmpeg-detect-mode-number.sh.j2"
    dest: "/opt/voc/scripts/ffmpeg-detect-mode-number.sh"
    mode: 0755
    owner: root
    group: root

- name: deploy decklink-format-test-all-script
  become: true
  template:
    src: "voctomix-scripts/ffmpeg-test-all-decklink-modes.sh.j2"
    dest: "/opt/voc/scripts/ffmpeg-test-all-decklink-modes.sh"
    mode: 0755
    owner: root
    group: root

# recording sink
- name: create recording script
  become: true
  template:
    src: "toolbox-scripts/recording-sink.sh.j2"
    dest: "/opt/voc/scripts/recording-sink.sh"
    mode: 0750
    owner: root
    group: root

- name: create recording systemd-unit
  become: true
  template:
    src: "toolbox-systemd-units/recording-sink.service.j2"
    dest: "/etc/systemd/system/recording-sink.service"
    mode: 0644
    owner: root
    group: root

- name: enable recording service
  become: true
  systemd:
    name: recording-sink.service
    enabled: yes
    daemon_reload: yes

# check recording - called via check_system script (common role)
- name: copy check_recording script
  become: true
  copy: src="files/check_recording.pl"
        dest="/usr/local/bin/check_recording.pl"
        mode=0755 owner=root group=root
  when: voc_perl_is_fixed | bool

- name: Symlink check recording script to /opt/voc/...
  become: true
  file: src=/usr/local/bin/check_recording.pl
        dest=/opt/voc/scripts/check_recording.sh
        state=link
  when: voc_perl_is_fixed | bool

- cron: name="check recording and send mqtt message"
  become: true
        state=absent
        minute="*/1" hour="*" month="*" day="*"
        job="nice -n 19 /opt/voc/scripts/check_recording.sh >/dev/null"
  when: voc_perl_is_fixed | bool



# create services for streaming
# but only, if we know what they do
# currently we do it more simple!
- name: create -inactive- combined streaming script
  become: true
  template: src="voctomix-scripts/streaming-sink-combined.sh.j2"
            dest="/opt/voc/scripts/streaming-sink-combined.sh"
            mode=0755 owner=root group=root
  when: voc_enable_original_fancy_streaming_to_localhost | bool

- name: create mkv-only streaming script
  become: true
  template: src="voctomix-scripts/streaming-sink-mkvonly.sh.j2"
            dest="/opt/voc/scripts/streaming-sink-mkvonly.sh"
            mode=0755 owner=root group=root
  when: voc_enable_original_fancy_streaming_to_localhost | bool

- name: create mkv-only systemd-unit
  become: true
  template: src="systemd-units/streaming-sink.service.j2"
            dest="/etc/systemd/system/streaming-sink-{{ item }}.service"
            mode=0644 owner=root group=root
  with_items: [mkvonly]
  when: voc_enable_original_fancy_streaming_to_localhost | bool

- name: enable streaming-sink-mkvonly service
  become: true
  service: name=streaming-sink-mkvonly.service
           enabled={{ streaming_service_enabled }}
  when: voc_enable_original_fancy_streaming_to_localhost | bool


- name: create framebuffer playout systemd-unit
  become: true
  template: src="voctomix-scripts/framebuffer-playout.sh.j2"
            dest="/opt/voc/scripts/{{ item }}-to-framebuffer-playout.sh"
            mode=0755 owner=root group=root
  with_items: [program, stream]
  when: voc_enable_original_fancy_streaming_to_localhost | bool

- name: create playout systemd-unit
  become: true
  template: src="systemd-units/framebuffer-playout.service.j2"
            dest="/etc/systemd/system/{{ item }}-to-framebuffer-playout.service"
            mode=0644 owner=root group=root
  with_items: [program, stream]
  when: voc_enable_original_fancy_streaming_to_localhost | bool

- name: disable playout service
  become: true
  service: name={{ item }}-to-framebuffer-playout.service
           enabled=false
  with_items: [program, stream]
  when: voc_enable_original_fancy_streaming_to_localhost | bool



  # pause source
- name: create pause-source script
  template: src="toolbox-scripts/pause-source.sh.j2"
            dest="/opt/voc/scripts/pause-source.sh"
            mode=0755 owner=root group=root

- name: create pause-source systemd-unit
  template: src="systemd-units/pause-source.service.j2"
            dest="/etc/systemd/system/pause-source.service"
            mode=0644 owner=root group=root

- name: enable pause-source service
  service: name=pause-source.service
           enabled=yes
  when: (voctomix_no_pause is not defined) or (not voctomix_no_pause | bool)



# voctocore service
# here will be our core service created
- name: create voctocore systemd-unit
  become: true
  template:
    src: "toolbox-systemd-units/voctocore.service.j2"
    dest: "/etc/systemd/system/voctocore.service"
    mode: 0644
    owner: root
    group: root

- name: reload systemd daemon
  become: true
  command: systemctl daemon-reload
  changed_when: false

- name: enable & (re)start voctocore service when in voctomix-mode
  become: true
  systemd:
    name: voctocore.service
    enabled: yes
    state: restarted
    daemon_reload: yes
  when: encodermode is defined and encodermode == 'hd-voctomix'

- name: disable & stop voctocore service when not in voctomix-mode
  become: true
  service: name=voctocore.service
           enabled=no
           state=stopped
  when: encodermode is not defined or encodermode != 'hd-voctomix'

- name: create voctomix-status script
  become: true
  template: src="voctomix-scripts/voctomix-status.j2"
              dest="/usr/bin/voctomix-status"
              mode=0755 owner=root group=root




